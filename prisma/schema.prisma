// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl      = env("SHADOW_DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String? 
  expires_at         Int? 
  token_type         String? 
  scope              String? 
  id_token           String? 
  session_state      String? 

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? 
  has_presets   Boolean?      @default(false)
  currency      String?       @default("INR")
  budgets       Budget[]
  categories    Category[]
  expenses      Expense[]
  subcategories Subcategory[]
  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Budget {
  id               String    @id @default(uuid())
  user             User?     @relation(fields: [user_id], references: [id])
  user_id          String?
  amount           Decimal
  category         Category? @relation(fields: [category_id], references: [id])
  category_id      String?
  start_date       DateTime
  end_date         DateTime
  budget_period_type String
  description      String?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @default(now())
}

model Category {
  id           String        @id @default(uuid())
  name         String
  user         User          @relation(fields: [user_id], references: [id])
  user_id      String
  budget       Decimal?
  budgets      Budget[]
  expenses     Expense[]
  subcategories Subcategory[]
}

model Expense {
  id               String    @id @default(uuid())
  user             User?     @relation(fields: [user_id], references: [id])
  user_id          String?
  amount           Decimal
  date             DateTime  @default(now())
  created_at       DateTime  @default(now())
  title            String?
  subcategory      String?
  is_recurring     Boolean?  @default(false)
  recurring_type   String?
  next_occurrence  DateTime?
  mode_of_payment  String?
  category         Category? @relation(fields: [category_id], references: [id])
  category_id      String?
}

model Subcategory {
  id          String    @id @default(uuid())
  name        String
  category    Category  @relation(fields: [category_id], references: [id])
  category_id String
  user        User      @relation(fields: [user_id], references: [id])
  user_id     String
}
